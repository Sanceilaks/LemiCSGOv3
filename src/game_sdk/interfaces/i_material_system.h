#pragma once
#include <game_sdk/misc/material_system_staff.h>

#include "i_app_system.h"

#define DECLARE_POINTER_HANDLE(name) struct name##__ { int unused; }; typedef struct name##__ *name
#define MAXSTUDIOSKINS		32

#define TEXTURE_GROUP_LIGHTMAP						        "Lightmaps"
#define TEXTURE_GROUP_WORLD							          "World textures"
#define TEXTURE_GROUP_MODEL							          "Model textures"
#define TEXTURE_GROUP_VGUI							          "VGUI textures"
#define TEXTURE_GROUP_PARTICLE						        "Particle textures"
#define TEXTURE_GROUP_DECAL							          "Decal textures"
#define TEXTURE_GROUP_SKYBOX						          "SkyBox textures"
#define TEXTURE_GROUP_CLIENT_EFFECTS				      "ClientEffect textures"
#define TEXTURE_GROUP_OTHER							          "Other textures"
#define TEXTURE_GROUP_PRECACHED						        "Precached"
#define TEXTURE_GROUP_CUBE_MAP						        "CubeMap textures"
#define TEXTURE_GROUP_RENDER_TARGET					      "RenderTargets"
#define TEXTURE_GROUP_UNACCOUNTED					        "Unaccounted textures"
//#define TEXTURE_GROUP_STATIC_VERTEX_BUFFER		  "Static Vertex"
#define TEXTURE_GROUP_STATIC_INDEX_BUFFER			    "Static Indices"
#define TEXTURE_GROUP_STATIC_VERTEX_BUFFER_DISP		"Displacement Verts"
#define TEXTURE_GROUP_STATIC_VERTEX_BUFFER_COLOR	"Lighting Verts"
#define TEXTURE_GROUP_STATIC_VERTEX_BUFFER_WORLD	"World Verts"
#define TEXTURE_GROUP_STATIC_VERTEX_BUFFER_MODELS	"Model Verts"
#define TEXTURE_GROUP_STATIC_VERTEX_BUFFER_OTHER	"Other Verts"
#define TEXTURE_GROUP_DYNAMIC_INDEX_BUFFER			  "Dynamic Indices"
#define TEXTURE_GROUP_DYNAMIC_VERTEX_BUFFER			  "Dynamic Verts"
#define TEXTURE_GROUP_DEPTH_BUFFER					      "DepthBuffer"
#define TEXTURE_GROUP_VIEW_MODEL					        "ViewModel"
#define TEXTURE_GROUP_PIXEL_SHADERS					      "Pixel Shaders"
#define TEXTURE_GROUP_VERTEX_SHADERS				      "Vertex Shaders"
#define TEXTURE_GROUP_RENDER_TARGET_SURFACE			  "RenderTarget Surfaces"
#define TEXTURE_GROUP_MORPH_TARGETS					      "Morph Targets"
#define TEXTURE_GROUP_STATIC_PROPS						"StaticProp textures"

enum CompiledVtfFlags
{
	// flags from the *.txt config file
	TEXTUREFLAGS_POINTSAMPLE = 0x00000001,
	TEXTUREFLAGS_TRILINEAR = 0x00000002,
	TEXTUREFLAGS_CLAMPS = 0x00000004,
	TEXTUREFLAGS_CLAMPT = 0x00000008,
	TEXTUREFLAGS_ANISOTROPIC = 0x00000010,
	TEXTUREFLAGS_HINT_DXT5 = 0x00000020,
	TEXTUREFLAGS_SRGB = 0x00000040,
	TEXTUREFLAGS_NORMAL = 0x00000080,
	TEXTUREFLAGS_NOMIP = 0x00000100,
	TEXTUREFLAGS_NOLOD = 0x00000200,
	TEXTUREFLAGS_ALL_MIPS = 0x00000400,
	TEXTUREFLAGS_PROCEDURAL = 0x00000800,

	// These are automatically generated by vtex from the texture data.
	TEXTUREFLAGS_ONEBITALPHA = 0x00001000,
	TEXTUREFLAGS_EIGHTBITALPHA = 0x00002000,

	// newer flags from the *.txt config file
	TEXTUREFLAGS_ENVMAP = 0x00004000,
	TEXTUREFLAGS_RENDERTARGET = 0x00008000,
	TEXTUREFLAGS_DEPTHRENDERTARGET = 0x00010000,
	TEXTUREFLAGS_NODEBUGOVERRIDE = 0x00020000,
	TEXTUREFLAGS_SINGLECOPY = 0x00040000,

	TEXTUREFLAGS_UNUSED_00080000 = 0x00080000,
	TEXTUREFLAGS_UNUSED_00100000 = 0x00100000,
	TEXTUREFLAGS_UNUSED_00200000 = 0x00200000,
	TEXTUREFLAGS_UNUSED_00400000 = 0x00400000,

	TEXTUREFLAGS_NODEPTHBUFFER = 0x00800000,

	TEXTUREFLAGS_UNUSED_01000000 = 0x01000000,

	TEXTUREFLAGS_CLAMPU = 0x02000000,

	TEXTUREFLAGS_VERTEXTEXTURE = 0x04000000,					// Useable as a vertex texture

	TEXTUREFLAGS_SSBUMP = 0x08000000,

	TEXTUREFLAGS_UNUSED_10000000 = 0x10000000,

	// Clamp to border color on all texture coordinates
	TEXTUREFLAGS_BORDER = 0x20000000,

	TEXTUREFLAGS_UNUSED_40000000 = 0x40000000,
	TEXTUREFLAGS_UNUSED_80000000 = 0x80000000,
};

struct InitReturnVal_t;
class IMaterialProxyFactory;
struct HDRType_t;
struct  MaterialLock_t;



class IMaterialSystem : public IAppSystem
{
public:
	IMaterial* create_material(const char* pMaterialName, KeyValues* pVMTKeyValues)
	{
		using fn = IMaterial * (__thiscall*)(IMaterialSystem*, const char*, KeyValues*);
		return (*(fn**)this)[83](this, pMaterialName, pVMTKeyValues);
	}

	IMaterial* find_material(const char* pMaterialName, const char* pTextureGroupName, bool complain = true, const char* pComplainPrefix = 0)
	{
		using fn = IMaterial * (__thiscall*)(IMaterialSystem*, const char*, const char*, bool, const char*);
		return (*(fn**)this)[84](this, pMaterialName, pTextureGroupName, complain, pComplainPrefix);
	}

	MaterialHandle_t first_material()
	{
		using fn = MaterialHandle_t(__thiscall*)(IMaterialSystem*);
		return (*(fn**)this)[86](this);
	}

	MaterialHandle_t next_material(MaterialHandle_t h)
	{
		using fn = MaterialHandle_t(__thiscall*)(IMaterialSystem*, MaterialHandle_t);
		return (*(fn**)this)[87](this, h);
	}

	MaterialHandle_t invalid_material()
	{
		using fn = MaterialHandle_t(__thiscall*)(IMaterialSystem*);
		return (*(fn**)this)[88](this);
	}

	IMaterial* get_material(MaterialHandle_t h)
	{
		using fn = IMaterial*(__thiscall*)(IMaterialSystem*, MaterialHandle_t);
		return (*(fn**)this)[89](this, h);
	}

	int	get_num_materials()
	{
		using fn = int(__thiscall*)(IMaterialSystem*);
		return (*(fn**)this)[90](this);
	}

	void begin_render_target_allocation()
	{
		using fn = void(__thiscall*)(IMaterialSystem*);
		return (*(fn**)this)[94](this);
	}

	void end_render_target_allocation()
	{
		using fn = void(__thiscall*)(IMaterialSystem*);
		return (*(fn**)this)[95](this);
	}

	int get_back_buffer_format()
	{
		using fn = int(__thiscall*)(IMaterialSystem*);
		return (*(fn**)this)[36](this);
	}

	ITexture* create_named_render_target_texture_ex(int back_buffer, const char* name)
	{
		using fn = ITexture * (__thiscall*)(IMaterialSystem*, const char*, int, int, int, int, int, int, int);
		return (*(fn**)this)[97](this, name, 1, 1, 4, back_buffer, 0x0, 0x00000004 | 0x00000008, 1);
	}

	IMatRenderContext* get_render_context()
	{
		using fn = IMatRenderContext * (__thiscall*)(IMaterialSystem*);
		return (*(fn**)this)[115](this);
	}

	bool& is_game_started()
	{
		return *(bool*)(uintptr_t(this) + 0x2C68);
	}
};